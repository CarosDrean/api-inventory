{"version":3,"sources":["../../src/resolvers/measure.js"],"names":["Query","measure","_","_id","Measure","findById","exec","measures","find","Mutation","createMeasure","input","save","deleteMeasure","findByIdAndDelete","updateMeasure","findByIdAndUpdate"],"mappings":";;;;;;;AAAA;;;;;;;;eAEe;AACXA,EAAAA,KAAK,EAAE;AACHC,IAAAA,OAAO;AAAA;AAAA;AAAA,8BAAE,iBAAMC,CAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAWC,gBAAAA,GAAX,QAAWA,GAAX;AAAA;AAAA,uBACQC,qBAAQC,QAAR,CAAiBF,GAAjB,EAAsBG,IAAtB,EADR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,OADJ;AAIHC,IAAAA,QAAQ;AAAA;AAAA;AAAA,8BAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACOH,qBAAQI,IAAR,EADP;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAJL,GADI;AASXC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,aAAa;AAAA;AAAA;AAAA,8BAAE,kBAAMR,CAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAWS,gBAAAA,KAAX,SAAWA,KAAX;AACLV,gBAAAA,OADK,GACK,IAAIG,oBAAJ,CAAYO,KAAZ,CADL;AAAA;AAAA,uBAEEV,OAAO,CAACW,IAAR,EAFF;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,OADP;AAKNC,IAAAA,aAAa;AAAA;AAAA;AAAA,8BAAE,kBAAMX,CAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAWC,gBAAAA,GAAX,SAAWA,GAAX;AAAA;AAAA,uBACEC,qBAAQU,iBAAR,CAA0BX,GAA1B,CADF;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,OALP;AAQNY,IAAAA,aAAa;AAAA;AAAA;AAAA,8BAAE,kBAAMb,CAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAWC,gBAAAA,GAAX,SAAWA,GAAX,EAAgBQ,KAAhB,SAAgBA,KAAhB;AAAA;AAAA,uBACEP,qBAAQY,iBAAR,CAA0Bb,GAA1B,EAA+BQ,KAA/B,EAAsC;AAAE,yBAAK;AAAP,iBAAtC,CADF;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AARP;AATC,C","sourcesContent":["import Measure from '../models/measure'\r\n\r\nexport default {\r\n    Query: {\r\n        measure: async(_, { _id }) => {\r\n            return await Measure.findById(_id).exec()\r\n        },\r\n        measures: async() => {\r\n            return await Measure.find()\r\n        }\r\n    },\r\n    Mutation: {\r\n        createMeasure: async(_, { input }) => {\r\n            const measure = new Measure(input)\r\n            return await measure.save()\r\n        },\r\n        deleteMeasure: async(_, { _id }) => {\r\n            return await Measure.findByIdAndDelete(_id)\r\n        },\r\n        updateMeasure: async(_, { _id, input }) => {\r\n            return await Measure.findByIdAndUpdate(_id, input, { new: true })\r\n        }\r\n    }\r\n}"],"file":"measure.js"}